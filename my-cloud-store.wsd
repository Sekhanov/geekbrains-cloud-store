@startuml

title my-cloud-store scheme

class ru.skhanov.mycloudstoreserver.ServerMainClass {
  {static} int MAX_OBJ_SIZE
  +void run()
  +void main()
}

class ru.skhanov.mycloudstoreserver.MainHandler {
-String userCloudStorage
-SqlUsersDaoService sqlUsersDaoService
+void channelRead()
-void fileOperationMessageHandler()
-void authMessageHandler()
-void deleteUsersCloudStorege()
-void deleteFileFromCloudStorage()
-void sendListOfFileParameters()
-void copyToClientStorege()
+void exceptionCaught()
}

ru.skhanov.mycloudstoreserver.MainHandler ..> ru.skhanov.mycloudstoreserver.SqlUsersDaoService : use

class ru.skhanov.mycloudstoreserver.SqlUsersDaoService {
  -Connection connection
  -PreparedStatement createPreparedStatement()
  +void insertUser()
  +void deleteUserByName()
  +User selectUserByName()
  +boolean authentication()
  +boolean changePass()


}

ru.skhanov.mycloudstoreserver.SqlUsersDaoService ..> ru.skhanov.mycloudstoreserver.SqlUsersDaoService.User : use

class ru.skhanov.mycloudstoreserver.SqlUsersDaoService.User{
  -login
  -password
}

interface java.io.Serializable {

}

 ru.skhanov.mycloudstorecommon.AbstractMessage --> java.io.Serializable

abstract class ru.skhanov.mycloudstorecommon.AbstractMessage {

}

class ru.skhanov.mycloudstorecommon.authenticationMessage {
  -boolean status
  -String login
	-String password
	-String newPassword
}

ru.skhanov.mycloudstorecommon.authenticationMessage ..> ru.skhanov.mycloudstorecommon.authenticationMessage.AuthCommandType: use

enum ru.skhanov.mycloudstorecommon.authenticationMessage.AuthCommandType {
  REGISTRATION
  CHANGE_PASS
  AUTHORIZATION
  DELETE_USER
}

ru.skhanov.mycloudstorecommon.authenticationMessage --> ru.skhanov.mycloudstorecommon.AbstractMessage

class ru.skhanov.mycloudstorecommon.FileMessage {
  -String filename
  -byte[] data
}

ru.skhanov.mycloudstorecommon.FileMessage --> ru.skhanov.mycloudstorecommon.AbstractMessage

class ru.skhanov.mycloudstorecommon.FileOperationsMessage {
  -FileOperation fileOperation
  -String fileName
}

ru.skhanov.mycloudstorecommon.FileOperationsMessage --> ru.skhanov.mycloudstorecommon.AbstractMessage

enum ru.skhanov.mycloudstorecommon.FileOperationsMessage.FileOperation {
		COPY
    MOVE
    DELETE		
	}

ru.skhanov.mycloudstorecommon.FileOperationsMessage ..> ru.skhanov.mycloudstorecommon.FileOperationsMessage.FileOperation: use

class ru.skhanov.mycloudstorecommon.FileParameters {
  String name
  Long size
  String date
}

ru.skhanov.mycloudstorecommon.FileParameters --> java.io.Serializable

class ru.skhanov.mycloudstorecommon.FileParametersListMessage {
  -List<FileParameters> fileParameterList
}

ru.skhanov.mycloudstorecommon.FileParametersListMessage --> ru.skhanov.mycloudstorecommon.AbstractMessage

ru.skhanov.mycloudstorecommon.FileParametersListMessage ..> ru.skhanov.mycloudstorecommon.FileParameters: use

ru.skhanov.mycloudstoreserver.MainHandler ..> ru.skhanov.mycloudstorecommon.authenticationMessage: use

ru.skhanov.mycloudstoreserver.MainHandler ..> ru.skhanov.mycloudstorecommon.FileMessage: use

ru.skhanov.mycloudstoreserver.MainHandler ..> ru.skhanov.mycloudstorecommon.FileOperationsMessage: use

ru.skhanov.mycloudstoreserver.MainHandler ..> ru.skhanov.mycloudstorecommon.FileParametersListMessage: use

class ru.skhanov.mycloudstoreclient.ClientMainClass {
  +void init()
  +void start()
  +void main()
  +void stop()
}

class ru.skhanov.mycloudstoreclient.MessageReciver {
  -Exchanger<authenticationMessage> authExchanger;
	-Exchanger<AbstractMessage> absExchanger
  +void run()
}

ru.skhanov.mycloudstoreclient.MessageReciver --> java.lang.Runnable

interface java.lang.Runnable {

}

ru.skhanov.mycloudstoreclient.MessageReciver ..> ru.skhanov.mycloudstorecommon.AbstractMessage: use

ru.skhanov.mycloudstoreclient.MessageReciver ..> ru.skhanov.mycloudstorecommon.authenticationMessage

ru.skhanov.mycloudstoreclient.MessageReciver ..> ru.skhanov.mycloudstorecommon.FileMessage

ru.skhanov.mycloudstoreclient.MessageReciver ..> ru.skhanov.mycloudstorecommon.FileParametersListMessage

class ru.skhanov.mycloudstoreclient.Network {
  {static} Socket socket
  {static} ObjectEncoderOutputStream objectEncoderOutputStream
  {static} ObjectDecoderInputStream objectDecoderInputStream
  {static} Exchanger<AbstractMessage> absMesExchanger
  {static} Exchanger<authenticationMessage> authMesExchanger
  {static} int MAX_OBJ_SIZE = 100 * 1024 * 1024
  {static} void start()
  {static} void stop()
  {static} boolean sendMsg()
  {static} AbstractMessage readObject()
}

ru.skhanov.mycloudstoreclient.Network ..> ru.skhanov.mycloudstorecommon.AbstractMessage: use

ru.skhanov.mycloudstoreclient.Network ..> ru.skhanov.mycloudstorecommon.authenticationMessage

class ru.skhanov.mycloudstoreclient.Util {
 {static} void fxThreadProcess()
}

class ru.skhanov.mycloudstoreclient.fxcontrollers.SignInFxController {
  -VBox rootPane
  -Label sqlOutputLabel
  -TextField loginTextField
  -PasswordField passwordField
  void initialize()
  -void registration()
  -void openUserWindow()
  -void changePassword()
  -void deleteUser() 
  -void enterStorage()
  -void createReciveMessageThread()
}

ru.skhanov.mycloudstoreclient.fxcontrollers.SignInFxController ..> ru.skhanov.mycloudstoreclient.MessageReciver: use

ru.skhanov.mycloudstoreclient.fxcontrollers.SignInFxController ..> ru.skhanov.mycloudstoreclient.Network: use

ru.skhanov.mycloudstoreclient.fxcontrollers.SignInFxController ..> ru.skhanov.mycloudstoreclient.Util

ru.skhanov.mycloudstoreclient.fxcontrollers.SignInFxController ..> ru.skhanov.mycloudstorecommon.authenticationMessage: use

ru.skhanov.mycloudstoreclient.fxcontrollers.SignInFxController ..> ru.skhanov.mycloudstorecommon.authenticationMessage.AuthCommandType: use

class ru.skhanov.mycloudstoreclient.fxcontrollers.StoragePanelFxController {
  -VBox rootPane
  -TableView<FileParameters> localTable
  -TableView<FileParameters> cloudTable
  -FileChooser fileChooser
  void initialize()
  void refreshLocalFileTable() 
  void refreshTableEntries()
  void initializeTables()
  void createReciveMessageThread()
  void requestCloudFileList()
  -Path copyFileToCloud()
  -void copyFileFromCloud()
  -void moveFileToCloud()
  -void moveFileFromClod()
  -void deleteLocalFile()
  -void delteFileFromCloud()
  -void uploadFileFormOs()
  -void downloadFileToOs()
  -void exitToSingUp()
  -void help()
  -void about()
}

ru.skhanov.mycloudstoreclient.fxcontrollers.StoragePanelFxController ..> ru.skhanov.mycloudstoreclient.MessageReciver: use

ru.skhanov.mycloudstoreclient.fxcontrollers.StoragePanelFxController ..> ru.skhanov.mycloudstoreclient.Network: use

ru.skhanov.mycloudstoreclient.fxcontrollers.StoragePanelFxController ..>  ru.skhanov.mycloudstorecommon.AbstractMessage: use

ru.skhanov.mycloudstoreclient.fxcontrollers.StoragePanelFxController ..> ru.skhanov.mycloudstorecommon.FileOperationsMessage: use

ru.skhanov.mycloudstoreclient.fxcontrollers.StoragePanelFxController ..> ru.skhanov.mycloudstorecommon.FileOperationsMessage.FileOperation: use

ru.skhanov.mycloudstoreclient.fxcontrollers.StoragePanelFxController ..> ru.skhanov.mycloudstorecommon.FileParameters: use

ru.skhanov.mycloudstoreclient.fxcontrollers.StoragePanelFxController ..> ru.skhanov.mycloudstorecommon.FileParametersListMessage: use

class ru.skhanov.mycloudstoreclient.fxcontrollers.UserController {
  -VBox rootPane
  -Label userLabel
  -TextField loginField
  -PasswordField passwordField
  -PasswordField confirmPasswordField
  void initialize()
  void setUserLabelText()
  -void enter()
}

ru.skhanov.mycloudstoreclient.fxcontrollers.UserController ..> ru.skhanov.mycloudstoreclient.Network: use

ru.skhanov.mycloudstoreclient.fxcontrollers.UserController ..> ru.skhanov.mycloudstorecommon.authenticationMessage: use

ru.skhanov.mycloudstoreclient.fxcontrollers.UserController ..>  ru.skhanov.mycloudstorecommon.authenticationMessage.AuthCommandType: use

@enduml